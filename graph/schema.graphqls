
type ClassReport {
  classID: String!
  className: String!
  highestStudentScore: Int!
  highestStudentScoreAsPercentage: Float!
  lowestStudentScore: Int!
  lowestStudentScoreAsPercentage: Float!
  studentsReport:[StudentReport!]!
}

type StudentRecord {
    id: String!
    name: String!
    classReport: StudentReport
}

type StudentReport {
  classPosition: Int! # overall position in the class based on total score.
  classGrade: String! # overall grade based on total score or percentage.
  subjectReport: [StudentSubjectReport!]!  # individual report for each subject.
  totalScore: Int! # sum of student scores across all subjects
  totalScorePercentage: Float! # total student score as a percentage of the maximum possible score
}

type StudentSubjectReport {
    name: String! # subject name
    score: Int! # subject score
    grade: String! # grade for subject
    position: Int! # position for subject based on subject score
}

type Query {
 classReport(classID: String!): ClassReport!
 studentReport(classID: String!, studentID: String!): StudentReport!
}

input NewClass {
  name: String!
  classSubjects: [Subject!]!
}

input Subject {
  name: String!
  maxScore: Int!
}

input StudentSubjectScore {
  name: String!
  score: Int!
}

type Mutation {
  # createClass creates a new class entry. Reports cannot be generated until
  # student records have been added to the newly created class.
  createClass(class: NewClass!): String!
   # addStudentRecord adds a student's record to an existing class.
  addStudentRecord(classID: String!, name: String!, subjectsScore: [StudentSubjectScore!]!): String!
  # computeClassReport computes the report for the class that match the provided
  # classID.
  computeClassReport(classID: String!): ClassReport!
}
