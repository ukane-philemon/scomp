# Class would be replaced by autobind.
type Class {
  _id: String!
  name: String!
  # subjects: [Subject!]! Not linked.
  report: ClassReport!
  createdAt: String!
  lastUpdatedAt: String!
}

type ClassReport {
  totalStudents: Int!
  highestStudentScore: Int!
  highestStudentScoreAsPercentage: String!
  lowestStudentScore: Int!
  lowestStudentScoreAsPercentage: String!
  generatedAt: String!
}

# Student would be replaced by autobind.
type Student {
  _id: String!
  name: String!
  classID: String!
  report: Report!
  createdAt: String!
}

type Report {
  class: StudentClassReport!
  subjects: [SubjectReport!]!
}

type StudentClassReport {
  grade: String!
  position: Int!
  totalScore: Int!
  totalScorePercentage: String!
}


type SubjectReport {
  name: String!
  score: Int!
  grade: String!
  position: Int!
}

type AuthenticatedAdmin {
  id: String!
  username: String!
  authToken: String!
}

type CompleteClassInfo {
  class: Class!
  students: [Student!]!
}

input SubjectScore {
  name: String!
  score: Int!
}

input Subject {
  name: String!
  maxScore: Int!
}

type Query {
 classInfo(classID: String!): CompleteClassInfo!
 classes(hasReport: Boolean): [CompleteClassInfo!]!
 student(classID: String!, studentID: String!): Student!
 students(classID: String!): [Student!]!
}

type Mutation {
  # createAdminAccount creates a new admin account.
  createAdminAccount(username: String!, password: String!): String!
  # login validates the admin login credentials and logs an admin into their
  # account.
  login(username: String!, password: String!): AuthenticatedAdmin!
  # createClass creates a new class entry. Reports cannot be generated until
  # student records have been added to the newly created class. Returns the
  # newly created class ID.
  createClass(className: String!, subjects: [Subject!]!): String!
   # addStudentRecord adds a student's record to an existing class and returns
   # the students ID.
  addStudentRecord(classID: String!, studentName: String!, subjectScores: [SubjectScore!]!): String!
  # computeClassReport computes the report for the class that match the provided
  # classID in the background.
  computeClassReport(classID: String!): String!
}
