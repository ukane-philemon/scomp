
type AuthenticatedAdmin {
  id: String!
  username: String!
  authToken: String!
}

# Class is a type holder and would be replaced by autobind.
type Class {
  name: String!
}

# Student isa type holder and would be replaced by autobind.
type Student {
  name: String!
}

type CompleteClassInfo {
  class: Class!
  students: [Student]!
}

input SubjectScore {
  name: String!
  score: Int!
}

input Subject {
  name: String!
  maxScore: Int!
}

type Query {
 classInfo(classID: String!): CompleteClassInfo!
 classes(hasReport: Boolean): [CompleteClassInfo!]!
 student(classID: String!, studentID: String!): Student!
 students(classID: String!): [Student!]!
}

type Mutation {
  # createAdminAccount creates a new admin account.
  createAdminAccount(username: String!, password: String!): String!
  # login validates the admin login credentials and logs an admin into their
  # account.
  login(username: String!, password: String!): AuthenticatedAdmin!
  # createClass creates a new class entry. Reports cannot be generated until
  # student records have been added to the newly created class. Returns the
  # newly created class ID.
  createClass(className: String!, subjects: [Subject!]!): String!
   # addStudentRecord adds a student's record to an existing class and returns
   # the students ID.
  addStudentRecord(classID: String!, studentName: String!, subjectScores: [SubjectScore!]!): String!
  # computeClassReport computes the report for the class that match the provided
  # classID in the background.
  computeClassReport(classID: String!): String!
}
