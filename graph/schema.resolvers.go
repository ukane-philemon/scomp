package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/ukane-philemon/scomp/graph/model"
	customerror "github.com/ukane-philemon/scomp/internal/errors"
)

// CreateAdminAccount is the resolver for the createAdminAccount field.
func (r *mutationResolver) CreateAdminAccount(ctx context.Context, username string, password string) (string, error) {
	err := r.db.CreateAdminAccount(username, password)
	if err != nil {
		return "", handleError(err)
	}

	return "Admin account created successfully, proceed to login.", nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*model.LoginResponse, error) {
	adminInfo, err := r.db.Login(username, password)
	if err != nil {
		return nil, handleError(err)
	}

	authToken, err := r.JWTManager.GenerateJWtToken(adminInfo.ID)
	if err != nil {
		return nil, handleError(err)
	}

	return &model.LoginResponse{
		AuthToken: authToken,
		AdminInfo: adminInfo,
	}, nil
}

// CreateClass is the resolver for the createClass field.
func (r *mutationResolver) CreateClass(ctx context.Context, class model.NewClass) (string, error) {
	if !reqAuthenticated(ctx) {
		return "", &customerror.ErrorUnauthorized{}
	}

	classID, err := r.db.CreateClass(&class)
	if err != nil {
		return "", handleError(err)
	}

	return classID, nil
}

// AddStudentRecord is the resolver for the addStudentRecord field.
func (r *mutationResolver) AddStudentRecord(ctx context.Context, classID string, student model.StudentRecordInput) (string, error) {
	if !reqAuthenticated(ctx) {
		return "", &customerror.ErrorUnauthorized{}
	}

	studentID, err := r.db.AddStudentRecordToClass(classID, &student)
	if err != nil {
		return "", handleError(err)
	}

	return studentID, nil
}

// ComputeClassReport is the resolver for the computeClassReport field.
func (r *mutationResolver) ComputeClassReport(ctx context.Context, classID string) (string, error) {
	if !reqAuthenticated(ctx) {
		return "", &customerror.ErrorUnauthorized{}
	}

	classSubjects, studentsInfo, err := r.db.ClassInfoForReport(classID)
	if err != nil {
		return "", handleError(err)
	}

	// Execute in the background.
	r.wg.Add(1)
	go func() {
		r.wg.Done()
		r.computeClassReport(classID, classSubjects, studentsInfo)
	}()

	return "Class report is being computed in the background, request for class report in ~10mins", nil
}

// ClassInfo is the resolver for the classInfo field.
func (r *queryResolver) ClassInfo(ctx context.Context, classID string) (*model.ClassInfo, error) {
	if !reqAuthenticated(ctx) {
		return nil, &customerror.ErrorUnauthorized{}
	}

	classInfo, err := r.db.ClassInfo(classID)
	if err != nil {
		return nil, handleError(err)
	}

	return classInfo, nil
}

// Classes is the resolver for the classes field.
func (r *queryResolver) Classes(ctx context.Context, hasReport *bool) ([]*model.ClassInfo, error) {
	if !reqAuthenticated(ctx) {
		return nil, &customerror.ErrorUnauthorized{}
	}

	classes, err := r.db.Classes(hasReport)
	if err != nil {
		return nil, handleError(err)
	}

	return classes, nil
}

// StudentRecord is the resolver for the studentRecord field.
func (r *queryResolver) StudentRecord(ctx context.Context, classID string, studentID string) (*model.StudentRecord, error) {
	if !reqAuthenticated(ctx) {
		return nil, &customerror.ErrorUnauthorized{}
	}

	studentRecord, err := r.db.StudentRecord(classID, studentID)
	if err != nil {
		return nil, handleError(err)
	}

	return studentRecord, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
